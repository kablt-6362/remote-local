// 비동기 처리 함수
// setTimeout, setInterval, fetch

// setTimeout(콜백,밀리초)
// 밀맃 뒤에 콜배개함수를 실행하는 비동기처리 함수

console.log("setTimeout 전 코드");
setTimeout(() => {
  console.log("5000ms 후 실행");
}, 5000);

setTimeout(() => {
  console.log("1000ms 후 실행");
}, 1000);
setTimeout(() => {
  console.log("2000ms 후 실행");
}, 2000);
console.log("setTimeout 후 코드");

// 자바스크립트는 기본적으로 하나의 스레드(Thread)를 사용합니다.

// 동기적 처리: 코드가 순서대로 실행되며, 특정 작업이 완료될 때까지 다음 작업이 대기합니다.
// ex) A 작업이 끝나야 B 작업이 시작

// 비동기적 처리: 시간이 오래 걸리는 작업을 백그라운드에 맡기고, 다음 작업을 즉시 진행합니다.
// ex) A 작업을 백그라운드에 맡기고, 동시에 B 작업을 시작

// 비동기 처리를 위한 핵심 요소와 메커니즘
// 1. 콜 스택(Call Stack): 현재 실행 중인 함수가 쌓이는 공간. 단일 스레드 환경이므로 한 번에 하나의 함수만 처리.
// 2. Web APIs: 브라우저나 Node.js가 제공하는 비동기 기능(setTimeout, fetch 등)을 처리하는 멀티 스레드 공간.
// 3. 콜백 큐(Callback Queue): Web APIs의 비동기 작업이 완료된 후, 실행될 콜백 함수가 대기하는 공간.
// 4. 이벤트 루프(Event Loop): 콜 스택이 비어있는지 지속적으로 확인하고, 비어있다면 콜백 큐에 있는 첫 번째 함수를 콜 스택으로 옮겨 실행합니다.

// 비유: 카페에서 커피 주문
// 콜 스택: 바리스타가 현재 만들고 있는 음료
// Web APIs: 에스프레소 머신 (추출이 끝날 때까지 기다리지 않고, 다른 손님을 받을 수 있음)
// 콜백 큐: "아메리카노 나왔습니다!" 하고 올려놓는 픽업대
// 이벤트 루프: 바리스타가 음료를 다 만들고 한가해졌을 때(콜 스택이 비었을 때), 픽업대에 놓인 음료가 있는지 확인하고 가져가는 행동


// 비유: 레스토랑 주방에서의 주문 처리
// 손님 주문 (로그인 요청): 손님이 "오늘의 스페셜 스테이크"를 주문합니다. 이 주문은 콜 스택에 올라와요.
// 바로 할 수 있는 일 (로딩 화면 표시): 주방장은 주문을 받자마자 "주문 접수"라는 팻말을 손님에게 보여줍니다. 이 팻말은 즉시 만들 수 있기 때문에 콜 스택에서 빠르게 처리됩니다.
// 오래 걸리는 요리 (서버 통신): 주방장은 이제 스테이크를 구워야 합니다. 스테이크는 익히는 데 시간이 오래 걸리죠. 그래서 주방장은 오븐에 스테이크를 넣고 **Web APIs(오븐)**에 맡깁니다.
// 다른 주문 처리 (콜 스택이 비고 다음 작업 진행): 주방장은 스테이크가 익는 동안 놀고 있지 않아요. ⏳ 그는 다른 손님의 간단한 주문(샐러드, 수프 등)을 처리하거나, 다음 요리를 준비합니다. 이처럼, 콜 스택이 비어 있는 상태에서 다른 작업들이 실행될 수 있는 것이 바로 비동기 처리의 핵심이에요. 로딩 화면이 표시된 상태에서도 사용자가 다른 버튼을 누르거나 화면을 스크롤하는 등의 작업이 가능한 이유입니다.
// 타이머 완료 및 픽업대 이동 (콜백 큐): 오븐에서 "땡!" 소리가 나면, 스테이크가 완성된 겁니다. 오븐은 스테이크를 **콜백 큐(음식 픽업대)**에 올려놓고 주방장에게 "스테이크 완성!"이라고 알려줍니다.
// 이벤트 루프 (주방장의 확인): 주방장은 다른 요리를 모두 마치고 한가해지면, 픽업대에 완성된 요리가 있는지 확인합니다.
// 요리 전달 (결과 처리): 주방장은 픽업대에 있는 스테이크를 가져와서 손님에게 전달합니다. 이로써 모든 과정이 마무리되죠.